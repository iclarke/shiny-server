{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Autel EDA\"\nauthor: \"Samy\"\ndate: \"13 September 2017\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\n\n  #install.packages(\"RPostgreSQL\")\n  require(\"RPostgreSQL\")\n\n \n  library(jsonlite)\n  library(dplyr)\n  library(ggplot2)\n  library(highcharter)\n  library(geojsonio)\n  library(lubridate)\n  library(tabulizer)\n  library(stringr)\n  library(gsubfn)\n  \n\n```\n\n```{r Load JSON data fro Redshift}\n\n  #Initialise connection\n  drv <- dbDriver(\"PostgreSQL\")\n  con <-dbConnect(drv,dbname=\"dev\",host=\"redjson.cih6vs0jk7a3.eu-west-1.redshift.amazonaws.com\",port=5439,\n                user=\"redjsonuser\",password=\"Redjsonpass1\")\n  \n  \n  #Get list of all available tables\n  \n  red_table_list <- dbGetQuery(con, \"select relname from pg_class where relkind='r' and relname !~ '^(pg_|sql_)';\") %>% \n    mutate(prefix = substr(relname,1,3))\n   # filter(prefix %in% c(\"red\"))\n  head(red_table_list)\n  \n  #Query one specific table\n  table_ex <-  dbGetQuery(conn = con,statement = \"SELECT * FROM stl_s3client\")\n  str(table_ex)\n  \n  dbDisconnect(con)\n\n\n\n\n```\n\n```{r Extract data from PDF}\n\n#Installing tabula R bindings \n\ninstall.packages(\"ghit\",repos='http://cran.us.r-project.org') \nlibrary(ghit)\n#ghit::install_github(c(\"leeper/tabulizerjars\", \"leeper/tabulizer\"), INSTALL_opts = \"--no-multiarch\", dependencies = c(\"Depends\", \"Imports\"))\nghit::install_github(c(\"leeper/tabulizerjars\", \"leeper/tabulizer\"), INSTALL_opts = \"--no-multiarch\", dependencies = c(\"Depends\", \"Imports\"))\ninstall.packages(\"gsubfn\")\n\nlibrary(tabulizer)\nlibrary(stringr)\nlibrary(gsubfn)\n\n#List of all car makes\n\ncar_makes <- c(\"ACURA\",\"AM GENERAL\",\"AMERICAN IRONHORSE\",\"APRILIA\",\"ARCTIC CAT\",\"ASTON MARTIN\",\"ATK\",\"AUDI\",\"AVANTI\",\"BENTLEY\",\"BIG DOG\",\"BIMOTA\",\"BLUE BIRD\",\"BMW\",\"BOMBARDIER\",\"BUELL\",\"BUICK\",\"CADILLAC\",\"CANNONDALE\",\"CHANCE COACH TRANSIT BUS\",\"CHEVROLET\",\"CHRYSLER\",\"COBRA\",\"DAEWOO\",\"DODGE\",\"DUCATI\",\"E-TON\",\"EL DORADO\",\"FERRARI\",\"FORD\",\"FREIGHTLINER\",\"GAS GAS\",\"GILLIG\",\"GMC\",\"HARLEY DAVIDSON\",\"HINO\",\"HM\",\"HONDA\",\"HUSABERG\",\"HUSQVARNA\",\"HYUNDAI\",\"INDIAN\",\"INFINITI\",\"INTERNATIONAL\",\"ISUZU\",\"JAGUAR\",\"JEEP\",\"KAWASAKI\",\"KENWORTH\",\"KIA\",\"KTM\",\"KYMCO\",\"LAFORZA\",\"LAMBORGHINI\",\"LANDROVER\",\"LEXUS\",\"LINCOLN\",\"LOTUS\",\"MACK\",\"MAZDA\",\"MERCEDES-BENZ\",\"MERCURY\",\"MITSUBISHI\",\"MITSUBISHI FUSO\",\"MOTO GUZZI\",\"MOTOR COACH INDUSTRIES\",\"MV AGUSTA\",\"NEW FLYER\",\"NISSAN\",\"NOVA BUS CORPORATION\",\"OLDSMOBILE\",\"ORION BUS\",\"OSHKOSH MOTOR TRUCK CO.\",\"OTTAWA\",\"PANOZ\",\"PETERBILT\",\"PEUGEOT\",\"PLYMOUTH\",\"POLARIS\",\"PONTIAC\",\"PORSCHE\",\"QVALE\",\"RENAULT\",\"ROLLS ROYCE\",\"SAAB\",\"SATURN\",\"SEA-DOO\",\"SEAT\",\"SKI-DOO\",\"STERLING\",\"STERLING TRUCK\",\"SUBARU\",\"SUZUKI\",\"TM\",\"TOYOTA\",\"TRIUMPH\",\"UD\",\"VICTORY\",\"VOLKSWAGEN\",\"VOLVO\",\"WESTERN STAR\",\"WORKHORSE\",\"YAMAHA\",\"ALFA ROMEO\",\"AUTOCAR LLC.\",\"COUNTRY COACH MOTORHOME\",\"HUMMER\",\"KASEA\",\"LEM\",\"MASERATI\",\"MINI\",\"MORGAN\",\"SALEEN\",\"WESTERN RV\",\"MAYBACH\",\"ROVER\",\"VENTO\",\"FIAT\",\"JOHN DEERE\",\"KUBOTA\",\"SCION\",\"SMART\",\"VESPA\",\"HYOSUNG\",\"PIAGGIO\",\"ARGO\",\"BUGATTI\",\"PIERCE MFG. INC.\",\"AMERICAN LAFRANCE\",\"CAN-AM\",\"CRANE CARRIER\",\"CUB CADET\",\"BETA\",\"BOBCAT\",\"TESLA\",\"RAM\",\"VPG\",\"CODA\",\"FISKER\",\"MCLAREN\",\"SRT\",\"BERTONE\",\"IC CORPORATION\",\"NASH\")\n\n\n# Extracting text and individual words from PDF\nout_text <- extract_text(\"./Inputs/PDF/ Diagnostic Report sn09nxv.pdf\")\nout_text <- gsub(\"\\\\\",\"\", out_text,fixed=TRUE)\nout_text_words <- unique(strsplit(paste(out_text, collapse = \" \"), ' ')[[1]])\nout_text_words <- gsub(\"\\r\",\"\",out_text_words)\nout_text_words <- gsub(\"\\n\",\"\",out_text_words)\n\n#Find matches corresponding to error codes & car make\n\n\nerror_codes <- as.vector(unique (grep(\".....\\\\-\\\\d\\\\d\", out_text_words, value=TRUE)))\ncar_make <- intersect(out_text_words,car_makes)\n#error_textx <- gsub(\".*.....\\\\-\\\\d\\\\d | (\\r\\n|\\r|\\n).*\",\"\",out_text)\nerror_texts <- as.vector(unique(strapplyc(out_text, \".....\\\\-\\\\d\\\\d(.*?)(\\r\\n|\\r|\\n).*\", simplify = c)))\n\nsummary_data <- c(\"YK64 XVX.pdf\",list(error_codes),list(error_texts),car_make)\n\n\ndir(path = \"./Inputs/PDF/\",pattern = NULL,full.names=TRUE,recursive=TRUE)\n\n\n```\n\n```{r Loop through folders and create a table with key features}\n# The goal here is to run through all the folders and subfolders, read each PDF, extract the key features, and store into a data frame\n\n\nFile_Name <- character()\nVehicle_make <- character()\nError_code_list <- list()\nError_text_list <-  list()\n\n\n# Feature extraction\n\ni=1\n\nfor (file_name in dir(path = \"./Inputs/PDF/\",pattern = \"^.*Diagnostic.*\\\\.pdf\",full.names=TRUE,recursive=TRUE)){\n  \n\n  \n  #Extract text from PDF\n  out_text <- extract_text(file_name)\n  #Basic text cleansing to enmable text recognition\n  out_text <- gsub(\"\\\\\",\"\", out_text,fixed=TRUE)\n  out_text_words <- unique(strsplit(paste(out_text, collapse = \" \"), ' ')[[1]])\n  out_text_words <- gsub(\"\\r\",\"\",out_text_words)\n  out_text_words <- gsub(\"\\n\",\"\",out_text_words)\n  \n  #Extract feature from cleansed text\n\n  error_codes <- as.vector(unique (grep(\".....\\\\-\\\\d\\\\d\", out_text_words, value=TRUE)))\n  car_make <- ifelse(length(intersect(out_text_words,car_makes)) == 0,\"Not found\",intersect(out_text_words,car_makes)) # to avoid zero length error\n  error_texts <- as.vector(unique(strapplyc(out_text, \".....\\\\-\\\\d\\\\d(.*?)(\\r\\n|\\r|\\n).*\", simplify = c)))\n  \n  \n  \n  File_Name[i] <- file_name\n  Vehicle_make[i] <- car_make\n  Error_code_list[[length(Error_code_list)+1]] <- error_codes\n  \n  \n  i <- i+1\n  \n}\n\nfeatures_df <- data.frame(cbind(File_Name,Vehicle_make,Error_code_list))\n\n\n```\n\n```{r debug}\n\ndebug_list <- character()\n\ni=1\nfor (file_name in dir(path = \"./Inputs/PDF/858500 - Russell Emptage/\",pattern = \"*diagnostic*\\\\.pdf$\",full.names=TRUE,recursive=TRUE)){\n  \n  debug_list[i] <- file_name\n  \n  i <- i+1\n  \n}\ndebug_list\n\nlist.files(path = \"./\",pattern = \"^.*Diagnostic.*\\\\.pdf\",full.names=TRUE,recursive=TRUE)\n\n```\n\n",
    "created" : 1505755558626.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "26|34|50|0|\n",
    "hash" : "948564100",
    "id" : "BD9B5525",
    "lastKnownWriteTime" : 1506008683,
    "last_content_update" : 1506008683203,
    "path" : "~/Dropbox/Autel/Autel_EDA.Rmd",
    "project_path" : "Autel_EDA.Rmd",
    "properties" : {
        "last_setup_crc32" : "317697ADc91afee7"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}