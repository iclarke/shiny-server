{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Functions and initialization\"\nauthor: \"Samy\"\ndate: \"26 January 2017\"\noutput: html_document\n---\n\n\n\n```{r Packages and Library,echo=FALSE,message=FALSE,warning=FALSE,results='hide'}\n# install.packages(\"shinydashboard\")\n#install.packages(\"rmarkdown\",repos='http://cran.us.r-project.org')\n#install.packages(\"highcharter\",repos='http://cran.us.r-project.org')\n#install.packages(\"crosstalk\")\n#install.packages(\"RPostgreSQL\")\n\n#library(shiny)\n#install.packages('shiny', repos='http://cran.us.r-project.org')\n#devtools::install_github('rstudio/DT')\n#devtools::install_github(\"rstudio/crosstalk\")\n\n#install.packages(\"flexdashboard\")\n\n#install.packages('packrat', repos='http://cran.us.r-project.org')\n#install.packages('rsconnect', repos='http://cran.us.r-project.org')\n\n#install.packages(\"sqlutils\")\n#install.packages(\"data.table\")\n#install.packages(\"xts\")\n#install.packages(\"dygraphs\")\n#install.packages(\"flexdashboard\")\n#library(ggplot2)\n#library(knitr)\n#library(rCharts)\n#library(ggthemes)\n#library(RODBC)\n#library(DT)\n#library(xtable)\n#library(shinydashboard)\nlibrary(dplyr)\n#library(sqlutils)\n#library(RPostgreSQL)\n#library(data.table)\nlibrary(dplyr)\n#library(ggplot2)\n#library(plotly)\n#library(RODBC)\nlibrary(xts)\nlibrary(dygraphs)\n\n\n\n\n```\n\n```{r percent function,echo=FALSE,message=FALSE,warning=FALSE,results='hide'}\n\npercent <- function(x, digits = 1, format = \"f\", ...) {\n  paste0(formatC(100 * x, format = format, digits = digits, ...), \"%\")\n}\n\n```\n\n```{r Operator list and  op mapping,echo=FALSE,message=FALSE,warning=FALSE,results='hide'}\n\n#Operator_list_0 <- c(\"All\",\"Aegean Air\",\"Aer Lingus\",\"Aeroflot\",\"Aerovias De Mexico\",\"Air Algerie\",\"Air Canada\",\"Air China\",\"Air France\",\"Air India\",\"Air Malta\",\"Air Mauritius\",\"Air New Zealand\",\"Air Serbia\",\"Alitalia\",\"American Airlines\",\"ANA All Nippon Airlines\",\"Arik Air Intl LTD\",\"Asiana Airlines\",\"Austrian Airlines\",\"Avianca\",\"Azerbaijan Airlines\",\"Biman Bangladesh\",\"British Airways\",\"Brussels Airlines\",\"Bulgarian Airways\",\"Cathay Pacific\",\"China Eastern\",\"China Southern\",\"CJSC Air Astana\",\"Croatia Airlines\",\"Delta Airlines\",\"Egypt Air\",\"EL AL\",\"Emirates\",\"Ethiopian Airlines\",\"Etihad\",\"Eurowings\",\"EVA Air\",\"Finnair\",\"Garuda Indonesia\",\"Germanwings GMBH\",\"Gulf Air\",\"Iberia\",\"Iberia Express\",\"Iceland air\",\"Iran air\",\"JAL Japan Airlines\",\"Jet Airways\",\"Kenya Airlines\",\"KLM\",\"Korean Air\",\"Kuwait Airways\",\"LATAM Brazilian\",\"Libyan Arab Airlines\",\"LOT Polish Airlines\",\"Lufthansa\",\"Malaysian Airlines\",\"MEA Middle East Airlines\",\"Oman Air\",\"Philippine Airlines\",\"PIA Pakistan International\",\"Qantas\",\"Qatar\",\"Royal Air Maroc\",\"Royal Brunei\",\"Royal Jordanian\",\"SAS Scandanavian\",\"Saudi Arabian Airlines\",\"Singapore Airlines\",\"South African Airlines\",\"Sri Lankan Airlines\",\"Swiss International\",\"TAP Air Portugal\",\"Tarom\",\"Thai International\",\"Tunisair\",\"Turkish Airlines\",\"Turkmenistan Airlines\",\"United Airlines\",\"US Airways\",\"Uzbekistan Airways\",\"Vietnam Airlines\",\"Virgin Atlantic\",\"Vueling Airlines\")\n\nOperator_list <- c(\"All\"=1,\"Aegean Air\"=2,\"Aer Lingus\"=3,\"Aeroflot\"=4,\"Aerovias De Mexico\"=5,\"Air Algerie\"=6,\"Air Canada\"=7,\"Air China\"=8,\"Air France\"=9,\"Air India\"=10,\"Air Malta\"=11,\"Air Mauritius\"=12,\"Air New Zealand\"=13,\"Air Serbia\"=14,\"Alitalia\"=15,\"American Airlines\"=16,\"ANA All Nippon Airlines\"=17,\"Arik Air Intl LTD\"=18,\"Asiana Airlines\"=19,\"Austrian Airlines\"=20,\"Avianca\"=21,\"Azerbaijan Airlines\"=22,\"Biman Bangladesh\"=23,\"British Airways\"=24,\"Brussels Airlines\"=25,\"Bulgarian Airways\"=26,\"Cathay Pacific\"=27,\"China Eastern\"=28,\"China Southern\"=29,\"CJSC Air Astana\"=30,\"Croatia Airlines\"=31,\"Delta Airlines\"=32,\"Egypt Air\"=33,\"EL AL\"=34,\"Emirates\"=35,\"Ethiopian Airlines\"=36,\"Etihad\"=37,\"Eurowings\"=38,\"EVA Air\"=39,\"Finnair\"=40,\"Garuda Indonesia\"=41,\"Germanwings GMBH\"=42,\"Gulf Air\"=43,\"Iberia\"=44,\"Iberia Express\"=45,\"Iceland air\"=46,\"Iran air\"=47,\"JAL Japan Airlines\"=48,\"Jet Airways\"=49,\"Kenya Airlines\"=50,\"KLM\"=51,\"Korean Air\"=52,\"Kuwait Airways\"=53,\"LATAM Brazilian\"=54,\"Libyan Arab Airlines\"=55,\"LOT Polish Airlines\"=56,\"Lufthansa\"=57,\"Malaysian Airlines\"=58,\"MEA Middle East Airlines\"=59,\"Oman Air\"=60,\"Philippine Airlines\"=61,\"PIA Pakistan International\"=62,\"Qantas\"=63,\"Qatar\"=64,\"Royal Air Maroc\"=65,\"Royal Brunei\"=66,\"Royal Jordanian\"=67,\"SAS Scandanavian\"=68,\"Saudi Arabian Airlines\"=69,\"Singapore Airlines\"=70,\"South African Airlines\"=71,\"Sri Lankan Airlines\"=72,\"Swiss International\"=73,\"TAP Air Portugal\"=74,\"Tarom\"=75,\"Thai International\"=76,\"Tunisair\"=77,\"Turkish Airlines\"=78,\"Turkmenistan Airlines\"=79,\"United Airlines\"=80,\"US Airways\"=81,\"Uzbekistan Airways\"=82,\"Vietnam Airlines\"=83,\"Virgin Atlantic\"=84,\"Vueling Airlines\"=85)\n\n\n\n# Loading operator mapping\n\n#op_map <- read.csv(\"C:/Users/WSAdmin/shiny-server-on-ubuntu/apps/al_map.csv\",header = TRUE)\n  \nsource(\"./Data import scripts/get_op_map.R\",local = TRUE)\n\n\n```\n\n```{r 1. Function to perform data frame swap for empty days ,echo=FALSE,message=FALSE,warning=FALSE,results='hide'}\n\n\n\n      replace_df <- function(data_frame_1){\n        \n        if(!is.na(nrow(data_frame_1))){\n        \n          if (nrow(data_frame_1) == 0) {\n            \n            data_frame_1 <- null_xts  \n            \n          }\n          \n        }\n        \n        \n        return(data_frame_1)\n      }\n      \n      increment_first_hour <- function(data_frame_2){\n        \n        library(lubridate)\n        \n        \n        if(!is.na(as.factor(strftime(tail(data_frame_2$Date.Time,1), format=\"%H:%M:%S\")))){\n        \n          if(as.factor(strftime(tail(data_frame_2$Date.Time,1), format=\"%H:%M:%S\")) == \"00:00:00\"){\n            \n            #data_frame_2$Date.Time[nrow(data_frame_2)] <-  tail(data_frame_2$Date.Time,1) + 60\n            data_frame_2 <- data_frame_2[!(as.factor(strftime(data_frame_2$Date.Time, format=\"%H:%M:%S\")) == \"00:00:00\"),]\n        \n          }\n          \n       return(data_frame_2) \n          \n        }\n        \n      }\n```\n      \n```{r 2. Function to get airline code from name,echo=FALSE,message=FALSE,warning=FALSE,results='hide'}      \n\n      \n      get_operator_code <- function(operator_name){\n      \n      operator_code <- as.character(op_map[op_map$Airline_sh_nb == operator_name,1])\n      \n      return(operator_code)\n      }  \n\n```\n\n```{r 3. Function to handle the selection of all and specific operators ,echo=FALSE,message=FALSE,warning=FALSE,results='hide'} \n\n          \n      filter_all_operator <- function(df,year_selection,month_selection,operator_selection,terminal_selection){\n  \n  library(dplyr)\n      \n          \n  if (operator_selection == \"1\"){\n    \n    # If no filter is applied on the operator(\"All\" is selected) then dataset is restricted for the selected\n    # value of month, year and terminal only\n    \n    df <- filter(df,\n                 ScheduledMonthName == month_selection,\n                 ScheduledYear == year_selection,\n                 Terminal%in% terminal_selection)\n  \n  }\n  \n  else{\n    \n    df <- filter(df,\n                 ScheduledMonthName == month_selection,\n                 ScheduledYear == year_selection,\n                 as.character(Operator) ==  as.character(\n                   op_map[which(op_map$Airline_sh_nb == as.character(operator_selection)),1]),\n                 Terminal %in% terminal_selection)\n    \n  }\n  \n\n  \n  return(df)\n  \n   \n      }\n\n```\n\n```{r 4. Custom DY graphs Javascript plotter for dual axis ,echo=FALSE,message=FALSE,warning=FALSE,results='hide'}\n\n\nplotter_bar <- \"function barChartPlotter(e) {\n                var ctx = e.drawingContext;\n                var points = e.points;\n                var y_bottom = e.dygraph.toDomYCoord(0);  // see     http://dygraphs.com/jsdoc/symbols/Dygraph.html#toDomYCoord\n\n                // This should really be based on the minimum gap\n                var bar_width = 2/3 * (points[1].canvasx - points[0].canvasx);\n                ctx.fillStyle = e.color;\n\n                // Do the actual plotting.\n                for (var i = 0; i < points.length; i++) {\n                  var p = points[i];\n                  var center_x = p.canvasx;  // center of the bar\n\n                  ctx.fillRect(center_x - bar_width / 2, p.canvasy,\n                               bar_width, y_bottom - p.canvasy);\n                  ctx.strokeRect(center_x - bar_width / 2, p.canvasy,\n                                 bar_width, y_bottom - p.canvasy);\n                }\n              }\"\n\n\n\npresAnnotation <- function(dygraph, x, text) {\n  dygraph %>%\n    dyAnnotation(x, text, attachAtBottom = TRUE, width = 600,height = 60)\n}\n\n\n\n\n```\n\n```{r 5. Functions to create and render charts and value boxes,echo=FALSE,message=FALSE,warning=FALSE,results='hide'}\n\ncreate_render_dep_chart_dy <- function(dy_day,dy_week){\n  \n  \n  renderDygraph({\n  \n\n  punc_mth_chart_dep <- filter(punc_mth_chart_dep,ScheduledMonthName == input$Month)\n  \n  \n  \n  dy_dep <- filter(punc_mth_chart_dep,WEEK_OF_MONTH == dy_week,ScheduledDwName == dy_day)\n  dy_dep <- replace_df(dy_dep)\n  dy_dep <- increment_first_hour(dy_dep)\n  dy_dep$WEEK_OF_MONTH <- NULL\n  dy_dep <- xts(dy_dep,order.by = dy_dep[,1])\n\n\ndy_chart_dep <- dygraph(dy_dep,main = paste(\"WEEK\",dy_week)) %>%\n  dyAxis(\"y\", label = \"Punctuality\", independentTicks = TRUE) %>%\n  dySeries(\"PercentPunctual\", axis = 'y',color = \"rgb(43,107,209)\",strokeWidth = 3,drawPoints = TRUE) %>%\n  dyAxis(\"y2\", label = \"ATM Movements\",independentTicks = TRUE) %>%\n  dySeries(\"TotalATMMovements\",axis = 'y2',plotter = plotter_bar,color = \"rgb(2,53,135)\")%>%\n  dyOptions(colors = RColorBrewer::brewer.pal(3, \"Set2\"))%>%\n  dyHighlight(highlightCircleSize = 5, \n              highlightSeriesBackgroundAlpha = 0.2,\n              hideOnMouseOut = FALSE)\n\n  \n\nreturn(dy_chart_dep)\n\n\n})\n  \n}\n\ncreate_render_dep_chart <- function(hc_day,hc_week){\n  \n  library(shiny)\n  library(highcharter)\n  library(lubridate)\n  \n\n  hc_dep_reactive <- eventReactive(input$go_dep,{\n    \n    \n  # Restricting the data to the relevant criteria selected by user\n    \n\n  hc_dep <-filter_all_operator(punc_mth_chart_dep,input$Year_dep,input$Month_dep,input$Operator_dep,input$Terminal_dep)\n  \n  \n  # Restricting data to the week number and day of the week the current chart represents\n\n   hc_dep <- filter(hc_dep,\n                    WEEK_OF_MONTH == hc_week,\n                    ScheduledDwName == hc_day)\n   \n   \n  #Calculating punctuality for the restricted dataset\n  \n \n   hc_dep <- hc_dep %>% \n     group_by(Date.Time) %>% \n     summarise(PercentPunctual = sum(CheckCount[IsPunctual ==1]) / sum(CheckCount),\n               TotalATMMovements = sum(CheckCount))\n  \n  \n  \n  # Further processing the dataset : replacing with 0s when dataset is empty (may not be necessary anymore)\n  \n  #hc_dep <- replace_df(hc_dep)\n  #hc_dep <- increment_first_hour(hc_dep)\n  #hc_dep$WEEK_OF_MONTH <- NULL\n  hc_dep <- arrange(hc_dep,Date.Time)\n  hc_dep$PercentPunctual <- hc_dep$PercentPunctual *100\n\n  current_day <- as.Date(as.POSIXct(hc_dep$Date.Time))[1]\n\n  \n  \n  highchart() %>% \n  hc_title(text = paste(\"Date: \",current_day , \" | WEEK:\",hc_week,\" | Airline:\",input$Operator_dep, \" | Terminal : \",paste(input$Terminal_dep,collapse = \" & \"))) %>% \n  hc_xAxis(categories = paste(hour(hc_dep$Date.Time) ,\"h\")) %>% \n  hc_yAxis_multiples(\n    list(\n      title = list(text = \"ATM Movements\"),\n      align = \"right\",\n      showFirstLabel = FALSE,\n      showLastLabel = FALSE,\n      labels = list(format = \"{value}\", useHTML = TRUE)\n    ),\n    list(\n      title = list(text = \"Punctuality\"),\n      align = \"left\",\n      showFirstLabel = FALSE,\n      showLastLabel = FALSE,\n      labels = list(format = \"{value} %\"),\n      opposite = TRUE\n    )\n  ) %>% \n  hc_add_series(name = \"ATM Movements\", type = \"column\",\n                data = hc_dep$TotalATMMovements,color = \"#4286f4\") %>% \n  hc_add_series(name = \"Punctuality\", type = \"line\",\n                data = hc_dep$PercentPunctual, yAxis = 1,color = \"#0945a5\") %>% \n  hc_add_theme(hc_theme_sandsignika()) %>% \n  hc_legend(align = \"left\", verticalAlign = \"top\",\n            layout = \"vertical\", x = 0, y = 100) %>% \n  hc_exporting(enabled = TRUE)\n    \n    \n\n  })\n  \n  \n  renderHighchart({\n    \n    hc_dep_reactive()\n    \n  })\n\n  \n\n   \n}\n\ncreate_render_arr_chart <- function(hc_day,hc_week){\n  \n  library(shiny)\n  library(highcharter)\n  library(lubridate)\n  \n  \n  hc_arr_reactive <- eventReactive(input$go_arr,{\n    \n  # Restricting the data to the relevant criteria selected by user\n    \n\n  hc_arr <- filter_all_operator(punc_mth_chart_arr,input$year_arr,input$Month_arr,input$Operator_arr,input$Terminal_arr)  \n  \n  \n  # Restricting data to the week number and day of the week the current chart represents\n\n   hc_arr <- filter(hc_arr,\n                    WEEK_OF_MONTH == hc_week,\n                    ScheduledDwName == hc_day)\n   \n  \n\n   \n  #Calculating punctuality for the restricted dataset\n  \n \n   hc_arr <- hc_arr %>% \n     group_by(Date.Time) %>% \n     summarise(PercentPunctual = sum(CheckCount[IsPunctual == 1]) / sum(CheckCount),\n               TotalATMMovements = sum(CheckCount))\n  \n   \n\n\n  #hc_arr <- replace_df(hc_arr)\n  #hc_arr <- increment_first_hour(hc_arr)\n  #hc_arr$WEEK_OF_MONTH <- NULL\n  hc_arr <- arrange(hc_arr,Date.Time)\n  hc_arr$PercentPunctual <- hc_arr$PercentPunctual *100\n  \n  current_day_arr <- as.Date(as.POSIXct(hc_arr$Date.Time))[1]\n\n  highchart() %>% \n  hc_title(text = paste(\"Date: \",current_day_arr , \" | WEEK:\",hc_week, \" |  Operator : \",input$Operator_arr,\" | Terminal : \",input$Terminal_arr)) %>% \n  hc_xAxis(categories = paste(hour(hc_arr$Date.Time) ,\"h\")) %>% \n  hc_yAxis_multiples(\n    list(\n      title = list(text = \"ATM Movements\"),\n      align = \"right\",\n      showFirstLabel = FALSE,\n      showLastLabel = FALSE,\n      labels = list(format = \"{value}\", useHTML = TRUE)\n    ),\n    list(\n      title = list(text = \"Punctuality\"),\n      align = \"left\",\n      showFirstLabel = FALSE,\n      showLastLabel = FALSE,\n      labels = list(format = \"{value} %\"),\n      opposite = TRUE\n    )\n  ) %>% \n  hc_add_series(name = \"ATM Movements\", type = \"column\",\n                data = hc_arr$TotalATMMovements,color = \"#E2950F\") %>% \n  hc_add_series(name = \"Punctuality\", type = \"line\",\n                data = hc_arr$PercentPunctual, yAxis = 1,color = \"#774d03\") %>% \n  hc_add_theme(hc_theme_sandsignika()) %>% \n  hc_legend(align = \"left\", verticalAlign = \"top\",\n            layout = \"vertical\", x = 0, y = 100)%>% \n  hc_exporting(enabled = TRUE)\n  \n\n  })\n  \n  \n  renderHighchart({\n    \n    hc_arr_reactive()\n    \n    \n    })\n\n  \n}\n\nrender_value_box_deps <- function(vb_day,vb_week){\n  \n  #punc_mth_dep <- read.csv(\"F:/BI reports/Rmarkdown/DFs/dep.csv\",header = TRUE)\n  \n  library(flexdashboard)\n  \n    \n    vb_dep_0 <-eventReactive(input$go_dep,{\n    \n    library(dplyr)\n    \n    #Restricting the dataset to fit the user constraints\n    \n    vb_dep <- filter_all_operator(punc_mth_chart_dep,input$Year_dep,input$Month_dep,input$Operator_dep,input$Terminal_dep)  \n    vb_dep <- filter(vb_dep, WEEK_OF_MONTH == vb_week, ScheduledDwName == vb_day)\n    \n    #Calculating punctuality and formatting box\n    \n    vb_dep_punc_day <- sum(vb_dep$IsPunctual)/sum(vb_dep$CheckCount)\n    vb_dep_color_status = ifelse(vb_dep_punc_day*100 < 79, \"danger\", \"success\")\n    vb_dep_value <- percent(vb_dep_punc_day)\n    \n    flexdashboard::valueBox(vb_dep_value,\n         color = vb_dep_color_status)\n\n  })\n    \n    \n  renderValueBox({\n    \n    vb_dep_0()\n    \n  })\n  \n}\n\nrender_value_box_arrs <- function(vb_day,vb_week){\n  \n  #punc_mth_dep <- read.csv(\"F:/BI reports/Rmarkdown/DFs/dep.csv\",header = TRUE)\n  \n  \n  vb_arr_0 <- eventReactive(input$go_arr,{\n    \n    library(dplyr)\n    \n    vb_arr <- filter_all_operator(punc_mth_chart_arr,input$year_arr,input$Month_arr,input$Operator_arr,input$Terminal_arr)  \n    vb_arr <- filter(vb_arr, WEEK_OF_MONTH == vb_week, ScheduledDwName == vb_day)\n    \n    #vb_arr <- filter(vb_arr,!is.na(TotalPunctual),!is.na(TotalATMMovements))\n    \n    vb_arr_punc_day <- sum(vb_arr$IsPunctual)/sum(vb_arr$CheckCount)\n    \n    valueBox(percent(vb_arr_punc_day),caption = vb_day,\n         icon = \"arrow-circle-down\",\n         color = ifelse(vb_arr_punc_day*100 < 79, \"danger\", \"success\"))\n\n  })\n  \n  \n  \n  renderValueBox({\n    \n    \n    vb_arr_0()\n    \n  })\n  \n  \n}\n\n\n```\n\n\n```{r Function to allow caption to display normally when multiple terminals are selected}\n\n```\n\n",
    "created" : 1506010287583.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2733937173",
    "id" : "502C58DC",
    "lastKnownWriteTime" : 1486137642,
    "last_content_update" : 1486137642,
    "path" : "~/Dropbox/HAL/Dashboard_project/Initialisation.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}